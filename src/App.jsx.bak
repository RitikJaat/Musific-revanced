import { useState, useEffect, useMemo } from 'react';
import NavBar from './assets/NavBar';
import Player from './assets/player/Player';
import Queue from './assets/player/Queue';
import Card, { StyledWrapper } from './assets/player/Card';
import Playlists from './assets/Playlists';
import { MusicProvider, useMusicContext } from './context/MusicContext';

// Playlist search result card component
const PlaylistCard = ({ playlist, onPlay }) => {
  return (
    <StyledWrapper onClick={() => onPlay(playlist.id, playlist.name)}>
      <div className="card">
        <div className="top-section" style={{ backgroundImage: `url(${playlist.image?.[2]?.url || playlist.image?.[1]?.url || playlist.image?.[0]?.url || '/placeholder-album.png'})` }}>
          <div className="border" />
          <div className="icons">
            <div className="logo">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 94 94" className="svg">
                <path fill="white" d="M38.0481 4.82927C38.0481 2.16214 40.018 0 42.4481 0H51.2391C53.6692 0 55.6391 2.16214 55.6391 4.82927V40.1401C55.6391 48.8912 53.2343 55.6657 48.4248 60.4636C43.6153 65.2277 36.7304 67.6098 27.7701 67.6098C18.8099 67.6098 11.925 65.2953 7.11548 60.6663C2.37183 56.0036 3.8147e-06 49.2967 3.8147e-06 40.5456V4.82927C3.8147e-06 2.16213 1.96995 0 4.4 0H13.2405C15.6705 0 17.6405 2.16214 17.6405 4.82927V39.1265C17.6405 43.7892 18.4805 47.2018 20.1605 49.3642C21.8735 51.5267 24.4759 52.6079 27.9678 52.6079C31.4596 52.6079 34.0127 51.5436 35.6268 49.4149C37.241 47.2863 38.0481 43.8399 38.0481 39.0758V4.82927Z" />
                <path fill="white" d="M86.9 61.8682C86.9 64.5353 84.9301 66.6975 82.5 66.6975H73.6595C71.2295 66.6975 69.2595 64.5353 69.2595 61.8682V4.82927C69.2595 2.16214 71.2295 0 73.6595 0H82.5C84.9301 0 86.9 2.16214 86.9 4.82927V61.8682Z" />
                <path fill="white" d="M2.86102e-06 83.2195C2.86102e-06 80.5524 1.96995 78.3902 4.4 78.3902H83.6C86.0301 78.3902 88 80.5524 88 83.2195V89.1707C88 91.8379 86.0301 94 83.6 94H4.4C1.96995 94 0 91.8379 0 89.1707L2.86102e-06 83.2195Z" />
              </svg>
            </div>
            <div className="playlist-info">
              <span className="count-label">{playlist.songCount} songs</span>
            </div>
          </div>
        </div>
        <div className="bottom-section">
          <span className="title">{playlist.name}</span>
          <div className="row row1">
            <div className="item artist-container">
              <span className="regular-text">Playlist</span>
            </div>
            <div className="item play-count-container">
              <span className="play-count">
                <span className="count-value">{playlist.songCount || 0}</span>
                <span className="count-label">songs</span>
              </span>
            </div>
          </div>
        </div>
      </div>
    </StyledWrapper>
  );
};

// Artist filter dropdown component
const ArtistFilter = ({ artists, selectedArtist, onChange }) => {
  return (
    <div className="flex items-center gap-2 ml-2 mb-2">
      <label className="text-sm text-gray-400">Filter by artist:</label>
      <select 
        className="bg-gray-800 text-white text-sm rounded-md px-2 py-1 border border-gray-700 focus:outline-none focus:ring-1 focus:ring-cyan-500"
        value={selectedArtist || ''}
        onChange={(e) => onChange(e.target.value === '' ? null : e.target.value)}
      >
        <option value="">All Artists</option>
        {artists.map((artist) => (
          <option key={artist} value={artist}>
            {artist}
          </option>
        ))}
      </select>
    </div>
  );
};

const ContentArea = () => {
  const { 
    searchResults, 
    searchPlaylistResults,
    trendingSongs, 
    attHits,
    haryanviSongs,
    top100Songs,
    punjabiHits,
    newReleases,
    activePlaylistName,
    loadAndPlayPlaylist,
    isSearchLoading,
    setIsSearchLoading,
    setActivePlaylistName,
    setActivePlaylist,
    playAllFromPlaylist,
    playSong,
    getHighestQualityUrl,
    savePlaylist
  } = useMusicContext();

  // State to control which view is shown
  const [activeView, setActiveView] = useState('home'); // 'home' or 'playlists'
  const [selectedArtist, setSelectedArtist] = useState(null);
  const [searchActivePlaylist, setSearchActivePlaylist] = useState(null);
  const [searchActivePlaylistSongs, setSearchActivePlaylistSongs] = useState([]);

  // Handle viewing a playlist from search
  const handleViewPlaylist = async (playlistId, playlistName) => {
    if (isSearchLoading) return; // Prevent multiple clicks
    
    setIsSearchLoading(true);
    try {
      // Load the playlist
      const response = await loadAndPlayPlaylist(playlistId, false); // Added param to not auto-play
      
      if (response && response.success && response.songs) {
        // Set the active playlist
        setSearchActivePlaylist(playlistName);
        setSearchActivePlaylistSongs(response.songs);
        
        // Switch to home view (we'll display the playlist there)
        setActiveView('home');
      }
    } catch (error) {
      console.error("Error loading playlist:", error);
    }
    setIsSearchLoading(false);
  };

  const handleViewChange = (view) => {
    setActiveView(view);
  };

  // Reset artist filter when switching views
  useEffect(() => {
    setSelectedArtist(null);
  }, [activeView]);

  return (
    <>
      <div className="navbar mb-4">
        <NavBar />
        <div className="view-selector flex justify-center gap-4 mt-4">
          <button 
            className={`px-4 py-2 rounded-full ${activeView === 'home' ? 'bg-cyan-700 text-white' : 'bg-gray-800 text-gray-300'}`}
            onClick={() => handleViewChange('home')}
          >
            Home
          </button>
          <button 
            className={`px-4 py-2 rounded-full ${activeView === 'playlists' ? 'bg-cyan-700 text-white' : 'bg-gray-800 text-gray-300'}`}
            onClick={() => handleViewChange('playlists')}
          >
            Playlists
          </button>
        </div>
      </div>

      <div className="split flex gap-4 h-[80vh]">
        {/* LEFT FIXED SECTION */}
        <div className="left border-2 p-4 w-1/3 sticky top-4 h-fit">
          <Queue />
          <div className="my-6"></div>
          <Player />
        </div>

        {/* RIGHT SCROLLABLE SECTION */}
        <div className="right border-2 p-4 w-2/3 overflow-y-auto scrollbar-hide">
          {activeView === 'home' ? (
            /* HOME VIEW */
            <>
              {/* SEARCH PLAYLIST VIEW (when a playlist is selected from search) */}
              {searchActivePlaylist && searchActivePlaylistSongs.length > 0 ? (
                <div className="search-playlist-view mb-8">
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold">
                      {searchActivePlaylist}
                    </h2>
                    <div className="flex gap-3">
                      <button
                        className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-1 rounded-full text-sm"
                        onClick={() => {
                          // Save this playlist to user playlists
                          savePlaylist(searchActivePlaylist, searchActivePlaylistSongs);
                          // Notify user
                          alert(`Playlist "${searchActivePlaylist}" has been saved!`);
                        }}
                      >
                        Save to Playlists
                      </button>
                      <button
                        className="bg-green-600 hover:bg-green-700 text-white px-4 py-1 rounded-full text-sm"
                        onClick={() => playAllFromPlaylist(searchActivePlaylistSongs)}
                      >
                        Play All
                      </button>
                      <button
                        className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-1 rounded-full text-sm"
                        onClick={() => {
                          setSearchActivePlaylist(null);
                          setSearchActivePlaylistSongs([]);
                        }}
                      >
                        Close
                      </button>
                    </div>
                  </div>
                  
                  {/* Playlist statistics */}
                  <div className="playlist-stats flex items-center gap-6 mb-6 text-sm text-gray-400">
                    <div>{searchActivePlaylistSongs.length} songs</div>
                    <div>
                      {Math.floor(searchActivePlaylistSongs.reduce((total, song) => 
                        total + (song.playCount || Math.floor(Math.random() * 100000)), 0) / 1000)}K total plays
                    </div>
                  </div>
                  
                  {/* Playlist songs in vertical list */}
                  <div className="playlist-songs">
                    {searchActivePlaylistSongs.map((song, index) => (
                      <div 
                        key={`${song.id}-${index}`}
                        className="playlist-song-item"
                        onClick={() => playSong(song, [...searchActivePlaylistSongs.slice(index)])}
                      >
                        <div className="song-number">{index + 1}</div>
                        <div className="song-cover">
                          <img 
                            src={song.image?.[0]?.url || getHighestQualityUrl(song.image) || '/placeholder-album.png'} 
                            alt={song.name}
                          />
                        </div>
                        <div className="song-details">
                          <div className="song-title">{song.name.replace(/ \(From .*?\)$/, '')}</div>
                          <div className="song-artist">{song.primaryArtists}</div>
                        </div>
                        <div className="song-plays">
                          {song.playCount ? `${Math.floor(song.playCount/1000)}K` : `${Math.floor(Math.random() * 500)}K`} plays
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <>
                  {/* SEARCH RESULTS SECTION */}
                  {searchResults && searchResults.length > 0 && (
                    <>
                      <h2 className="text-xl font-semibold ml-2 mb-2">🔍 Song Results</h2>
                      <div className="search-results flex overflow-x-scroll overflow-y-hidden scrollbar-hide m-2 py-2 px-1 gap-3">
                        {searchResults.map((item) => (
                          <Card key={item.id} item={item} updateQueue={true} />
                        ))}
                      </div>
                    </>
                  )}
                  
                  {/* PLAYLIST SEARCH RESULTS */}
                  {searchPlaylistResults && searchPlaylistResults.length > 0 && (
                    <>
                      <h2 className="text-xl font-semibold ml-2 mt-6 mb-2">📑 Playlist Results</h2>
                      <div className="playlist-results flex overflow-x-scroll overflow-y-hidden scrollbar-hide m-2 py-2 px-1 gap-4">
                        {searchPlaylistResults.map((playlist) => (
                          <PlaylistCard
                            key={playlist.id}
                            playlist={playlist}
                            onPlay={handleViewPlaylist}
                          />
                        ))}
                      </div>
                    </>
                  )}

                  {/* TRENDING SECTION */}
                  <h2 className="text-xl font-semibold ml-2 mb-2">📈 Trending</h2>
                  <div className="trending flex gap-4 overflow-x-scroll overflow-y-hidden scrollbar-hide m-2 py-2 px-1">
                    {trendingSongs && trendingSongs.length > 0 ? (
                      trendingSongs.slice(0, 10).map((item) => (
                        <Card key={item.id} item={item} updateQueue={true} />
                      ))
                    ) : (
                      <>
                        <Card />
                        <Card />
                        <Card />
                        <Card />
                      </>
                    )}
                  </div>

                  {/* ATT HITS SECTION */}
                  <h2 className="text-xl font-semibold ml-2 mt-6 mb-2">🔥 Att Hits</h2>
                  <div className="att-hits flex gap-4 overflow-x-scroll overflow-y-hidden scrollbar-hide m-2 py-2 px-1">
                    {attHits && attHits.length > 0 ? (
                      attHits.map((item) => (
                        <Card key={item.id} item={item} updateQueue={true} />
                      ))
                    ) : (
                      <>
                        <Card />
                        <Card />
                        <Card />
                        <Card />
                      </>
                    )}
                  </div>

                  {/* PUNJABI HITS SECTION */}
                  <h2 className="text-xl font-semibold ml-2 mt-6 mb-2">💫 Punjabi Hits</h2>
                  <div className="punjabi-hits flex gap-4 overflow-x-scroll overflow-y-hidden scrollbar-hide m-2 py-2 px-1">
                    {punjabiHits && punjabiHits.length > 0 ? (
                      punjabiHits.map((item) => (
                        <Card key={item.id} item={item} updateQueue={true} />
                      ))
                    ) : (
                      <>
                        <Card />
                        <Card />
                        <Card />
                        <Card />
                      </>
                    )}
                  </div>

                  {/* HARYANVI SECTION */}
                  <h2 className="text-xl font-semibold ml-2 mt-6 mb-2">🎵 Haryanvi Hits</h2>
                  <div className="haryanvi flex gap-4 overflow-x-scroll overflow-y-hidden scrollbar-hide m-2 py-2 px-1">
                    {haryanviSongs && haryanviSongs.length > 0 ? (
                      haryanviSongs.map((item) => (
                        <Card key={item.id} item={item} updateQueue={true} />
                      ))
                    ) : (
                      <>
                        <Card />
                        <Card />
                        <Card />
                        <Card />
                      </>
                    )}
                  </div>

                  {/* TOP 100 SECTION */}
                  <h2 className="text-xl font-semibold ml-2 mt-6 mb-2">🏆 Top 100</h2>
                  <div className="top-100 flex gap-4 overflow-x-scroll overflow-y-hidden scrollbar-hide m-2 py-2 px-1">
                    {top100Songs && top100Songs.length > 0 ? (
                      top100Songs.slice(0, 15).map((item) => (
                        <Card key={item.id} item={item} updateQueue={true} />
                      ))
                    ) : (
                      <>
                        <Card />
                        <Card />
                        <Card />
                        <Card />
                      </>
                    )}
                  </div>
                </>
              )}
            </>
          ) : (
            /* PLAYLISTS VIEW */
            <Playlists />
          )}
        </div>
      </div>
    </>
  );
};

function App() {
  return (
    <MusicProvider>
      {/* MAIN CONTENT */}
      <div className="relative z-10 Homepage min-h-screen bg-black text-white p-4">
        <div className="hompeageContent border-2 min-h-[90vh] rounded-3xl p-4 bg-black/70 backdrop-blur-md">
          <ContentArea />
        </div>
      </div>
    </MusicProvider>
  );
}

export default App;
